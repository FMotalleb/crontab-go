{
  "$ref": "#/definitions/scheduler-conf",
  "definitions": {
    "scheduler-conf": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Job"
          },
          "description": "An array of Job objects that define the tasks to be executed."
        }
      },
      "required": [
        "jobs"
      ],
      "title": "scheduler-conf"
    },
    "Job": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "A string that represents the name of the job."
        },
        "description": {
          "type": "string",
          "description": "An optional string that provides a description of the job."
        },
        "disabled": {
          "type": "boolean",
          "description": "An optional boolean that indicates whether the job is disabled or not."
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          },
          "description": "An array of Task objects that define the tasks to be executed as part of the job."
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          },
          "description": "An array of Event objects that define the scheduling configuration for the job."
        },
        "hooks": {
          "$ref": "#/definitions/Hooks",
          "description": "An optional Hooks object that defines the hooks to be executed before or after the job."
        },
        "concurrency": {
          "type": "integer",
          "validate": {
            "minimum": 1
          },
          "description": "Amount of concurrent tasks that will be executed at the same time. defaults to 1"
        }
      },
      "required": [
        "name",
        "events",
        "tasks"
      ],
      "title": "Job"
    },
    "Hooks": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "done": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          },
          "description": "An array of Task objects that define the tasks to be executed when the job is completed successfully."
        },
        "failed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          },
          "description": "An array of Task objects that define the tasks to be executed when the job fails."
        }
      },
      "title": "Hooks"
    },
    "Event": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "cron": {
          "type": "string",
          "description": "A string that represents the cron expression that defines the scheduling frequency.",
          "examples": [
            "* * * * *",
            "* * * * * *",
            "@hourly",
            "@every 5s",
            "@yearly"
          ]
        },
        "interval": {
          "type": "string",
          "description": "A string that represents the interval at which the job should be executed.",
          "examples": [
            "1s",
            "10m",
            "1h",
            "3.5h",
            "5h30m15s"
          ]
        },
        "on-init": {
          "type": "boolean",
          "description": "Indicates that the job should trigger its tasks once initialized."
        },
        "web-event": {
          "type": "string",
          "description": "Event name that received from webserver that should trigger this job."
        },
        "docker": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "connection": {
              "type": "string",
              "examples": [
                "unix:///var/run/docker.sock"
              ],
              "description": "Docker connection string (context), defaults to `unix:///var/run/docker.sock`."
            },
            "name": {
              "type": "string",
              "examples": [
                "nginx",
                ".*nginx.*",
                "^project.*"
              ],
              "description": "Name matcher of the container, supports regex."
            },
            "image": {
              "type": "string",
              "examples": [
                "redis:7.2.1-alpine",
                "redis:.*"
              ],
              "description": "Name matcher of the image, supports regex."
            },
            "actions": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "create",
                  "start",
                  "restart",
                  "stop",
                  "checkpoint",
                  "pause",
                  "unpause",
                  "attach",
                  "detach",
                  "resize",
                  "update",
                  "rename",
                  "kill",
                  "die",
                  "oom",
                  "destroy",
                  "remove",
                  "commit",
                  "top",
                  "copy",
                  "archive-path",
                  "extract-to-dir",
                  "export",
                  "import",
                  "save",
                  "load",
                  "tag",
                  "untag",
                  "push",
                  "pull",
                  "prune",
                  "delete",
                  "enable",
                  "disable",
                  "connect",
                  "disconnect",
                  "reload",
                  "mount",
                  "unmount",
                  "exec_create",
                  "exec_start",
                  "exec_die",
                  "exec_detach",
                  "health_status",
                  "health_status: running",
                  "health_status: healthy",
                  "health_status: unhealthy"
                ]
              },
              "description": "What happened to the container"
            },
            "labels": {
              "type": "object",
              "description": "Labels of the affected container, supports `key: regex value`."
            },
            "error-limit-count": {
              "type": "integer",
              "validate": {
                "minimum": 1
              },
              "description": "How many consecutive errors must happen before enforcing the error-limit-policy"
            },
            "error-limit-policy": {
              "type": "integer",
              "enum": [
                "kill",
                "give-up",
                "reconnect"
              ],
              "description": "What should happen after error limit is reached, (kill: kills the crontab-go, give-up: ignore error and disconnect from the instance and ignore this instance for the rest of the process, reconnect: reconnect: (default behavior) will attempt to reconnect to the instance)"
            },
            "error-throttle": {
              "type": "string",
              "description": "Wait time after an error happens (events from that docker instance in this time will be ignored).",
              "examples": [
                "1s",
                "10m",
                "1h",
                "3.5h",
                "5h30m15s"
              ]
            }
          },
          "description": "Listen for docker events"
        }
      },
      "required": [],
      "title": "Event"
    },
    "Task": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "command": {
          "type": "string",
          "description": "A string that represents the command to be executed."
        },
        "retries": {
          "type": "integer",
          "description": "An integer that represents the number of times the task should be retried in case of failure.",
          "validate": {
            "minimum": 1
          }
        },
        "retry-delay": {
          "type": "string",
          "description": "A string that represents the delay between retries.",
          "example": "1s 10m15s"
        },
        "timeout": {
          "type": "string",
          "description": "A string that represents the timeout for the task."
        },
        "working-dir": {
          "type": "string",
          "description": "A string that represents the working directory for the task."
        },
        "user": {
          "type": "string",
          "description": "Username that this command must run as. (root privilege needed)"
        },
        "group": {
          "type": "string",
          "description": "Groupname that this command must run as. (root privilege needed)"
        },
        "env": {
          "$ref": "#/definitions/Map",
          "description": "An Env object that defines the environment variables for the task."
        },
        "get": {
          "type": "string",
          "format": "uri",
          "qt-uri-protocols": [
            "https",
            "http"
          ],
          "description": "A string that represents the URL to be fetched using the GET method."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Map"
          },
          "description": "An array of Header objects that define the headers to be sent with the request."
        },
        "post": {
          "type": "string",
          "format": "uri",
          "qt-uri-protocols": [
            "https",
            "http"
          ],
          "description": "A string that represents the URL to be sent using the POST method."
        },
        "on-done": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          },
          "description": "List of optional hooks"
        },
        "on-fail": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          },
          "description": "Username that this command must run as. (root privilege needed)"
        },
        "data": {
          "$ref": "#/definitions/Data",
          "description": "A Data object that defines the data to be sent with the request."
        },
        "connections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskConnection"
          },
          "description": "Connection config."
        }
      },
      "required": [],
      "title": "Task"
    },
    "Data": {
      "type": "object",
      "additionalProperties": true,
      "required": [],
      "title": "Data"
    },
    "TaskConnection": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "local": {
          "type": "boolean",
          "title": "Local environment"
        },
        "docker": {
          "type": "string",
          "title": "docker connection string"
        },
        "container": {
          "type": "string",
          "title": "container name/id matcher",
          "description": "Should match only one container, if matches two or more container the command will fail"
        },
        "image": {
          "type": "string",
          "title": "Image name/id"
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Volumes"
        },
        "networks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Networks"
        }
      },
      "required": [],
      "title": "Data"
    },
    "Map": {
      "type": "object",
      "additionalProperties": true,
      "properties": {},
      "title": "Map"
    }
  }
}