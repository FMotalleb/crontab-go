# yaml-language-server: $schema=https://github.com/FMotalleb/crontab-go/raw/main/schema.json
#TODO: unix/tcp socket controller
#TODO: prometheus exporter

jobs:
  # Jobs can be assigned a unique name, which will be included in log messages for easier debugging.
  - name: Test Job
    # Description is reserved for the future
    description: Sample of a single job
    # Jobs can be disabled explicitly instead of commenting/removing the job
    disabled: true
    tasks:
      # This line specifies the actual command to be executed.
      - command: echo 15
        # This setting determines the number of times the task will be retried if it fails
        # A failure is defined by either a non-zero exit code for commands or a status code of 400 or higher for HTTP requests.
        retries: 3
        # This specifies the delay between retries.
        retry-delay: 1s
        # This sets a maximum time limit for the task to complete.
        # If the task exceeds 15 seconds, it will be considered failed and stopped (command) or canceled (http requests)
        timeout: 15s
        # This defines the working directory for the command.
        working_directory: C://
        # This section allows you to set environment variables that will be available to the command during execution.
        # `SHELL` and `SHELL_ARGS` can be used to change this commands shell environment
        env:
          DB_HOST: 10.0.0.5

      # A simple get request
      - get: https://example.com/get
        # headers of request `map[string]string`
        headers:
          - "Accepts": "Application/Json"

      # A simple post request example
      - post: https://example.com/post
        # headers of request `map[string]string`
        headers:
          - "Accepts": "Application/Json"
        # Body of post request (can be a json object)
        data:
          key: value
    schedulers:
      # Schedulers can be defined using either a cron expression or an interval, but not both simultaneously.
      # However, you can combine multiple cron expressions and intervals within the same scheduler.

      # The cron scheduler allows you to specify schedules down to the second level of precision using cron expressions.
      - cron: "1 * * * * *"
      # Intervals can be defined using human-readable formats.
      # For example, '10h' represents 10 hours, '10m' represents 10 minutes, and '10m15s' represents every 10 minutes and 15 seconds.
      # You can use units of hours (h), minutes (m), seconds (s), milliseconds (ms), and nanoseconds (ns) to define your intervals.
      - interval: 10m10s
    hooks:
      # Hooks are essentially tasks like those used in jobs, but they do not support nested hooks.
      # Additionally, errors or completion status of hooks are not directly managed by the system.
      # Instead, they are logged for informational purposes.

      # Every command within a job triggers its own set of hooks.
      # For instance, a job with two tasks and three 'done' hooks will execute a total of six hooks (if done)
      # during a single run: three for each task.

      # The 'done' hook will be triggered for HTTP requests with status codes below 400,
      # indicating successful completion.
      # For commands, the 'done' hook will be triggered if the exit code is 0,
      # signifying successful execution.
      # otherwise the `failed` hooks will be executed
      done:
        - command: echo Ok
      failed:
        - command: echo Failed
